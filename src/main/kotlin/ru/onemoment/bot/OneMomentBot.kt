package ru.onemoment.bot

import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.dispatcher.Dispatcher
import com.github.kotlintelegrambot.dispatcher.callbackQuery
import com.github.kotlintelegrambot.dispatcher.command
import com.github.kotlintelegrambot.entities.ChatAction
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.ParseMode
import com.github.kotlintelegrambot.entities.TelegramFile
import com.github.kotlintelegrambot.logging.LogLevel
import org.springframework.stereotype.Component
import ru.onemoment.components.BotProperties
import ru.onemoment.keyboards.Keyboard
import ru.onemoment.keyboards.KeyboardFactory
import ru.onemoment.service.ScheduleService
import ru.onemoment.service.TeacherService
import ru.onemoment.utills.PhotoTitleConverter
import ru.onemoment.utills.VideoTitleConverter
import java.io.File

@Component
class OneMomentBot(
    private val botProperties: BotProperties,
    private val teacherService: TeacherService,
    private val keyboardFactory: KeyboardFactory,
    private val scheduleService: ScheduleService
) {

    fun createBot(): Bot {
        return bot {
            timeout = botProperties.timeout
            token = botProperties.token
            logLevel = LogLevel.All()

            dispatch {
                setUpCommands()
                setUpCallbacks()
            }

        }
    }

    private fun Dispatcher.setUpCommands() {

        command("start") {
            val chatId = ChatId.fromId(message.chat.id)

            bot.sendMessage(
                chatId = chatId,
                text = "–ü—Ä–∏–≤–µ—Ç –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üéâ"
            )

            Thread.sleep(500)

            bot.sendMessage(
                chatId = chatId,
                text = "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è",
                replyMarkup = keyboardFactory.create(Keyboard.Login())
            )
        }

        command("teachers") {

            val chatId = ChatId.fromId(message.chat.id)
            val teacher = teacherService.getCurrentTeacher()

            bot.sendPhoto(
                chatId = chatId,
                photo = TelegramFile.ByFile(
                    File(PhotoTitleConverter.getAbsolutePhotoPath(teacher.photoTitle))
                ),
                caption = teacherService.getInfo(),
                replyMarkup = keyboardFactory.create(Keyboard.TeacherKeyboard()),
                parseMode = ParseMode.MARKDOWN
            )
        }

        command("login") {

            val chatId = ChatId.fromId(message.chat.id)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –±–¥ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–∞—Ç–µ–ª—å
            // –ï—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∞–Ω
            // –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–∞–≤–∞–π –∫–∞ –∑–∞—Ä–µ–≥–∞–π—Å—è

            bot.sendMessage(
                chatId = chatId,
                text = "–°–∫–æ—Ä–æ —Å–¥–µ–ª–∞–µ–º :)",
            )
        }

        command("help") {
            val chatId = ChatId.fromId(message.chat.id)

            val helpText = """
                    *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:*
                    /start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
                    /teachers - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–∏—Ç–µ–ª–µ–π –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    /login - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è

                    /help - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
                """.trimIndent()

//                    *–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:*
//                    /schedule - –º–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
//                    /group - –º–æ—è –≥—Ä—É–ø–ø–∞
//                    /trial - –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ
//                    /pay - –æ–ø–ª–∞—Ç–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç

            bot.sendMessage(
                chatId = chatId,
                text = helpText,
                parseMode = ParseMode.MARKDOWN,
            )
        }
    }

    private fun Dispatcher.setUpCallbacks() {
        callbackQuery(callbackData = "prevTeacher") {
            val teacher = teacherService.getPreviousTeacher()

            val chatId = callbackQuery.message?.chat?.id ?: return@callbackQuery
            val messageId = callbackQuery.message?.messageId ?: return@callbackQuery

            bot.deleteMessage(
                chatId = ChatId.fromId(chatId),
                messageId = messageId
            )

            bot.sendPhoto(
                chatId = ChatId.fromId(chatId),
                photo = TelegramFile.ByFile(
                    File(PhotoTitleConverter.getAbsolutePhotoPath(teacher.photoTitle))
                ),
                caption = teacherService.getInfo(),
                replyMarkup = keyboardFactory.create(Keyboard.TeacherKeyboard()),
                parseMode = ParseMode.MARKDOWN
            )
        }

        callbackQuery(callbackData = "nextTeacher") {
            val teacher = teacherService.getNextTeacher()

            val chatId = callbackQuery.message?.chat?.id ?: return@callbackQuery
            val messageId = callbackQuery.message?.messageId ?: return@callbackQuery

            bot.deleteMessage(
                chatId = ChatId.fromId(chatId),
                messageId = messageId
            )

            bot.sendPhoto(
                chatId = ChatId.fromId(chatId),
                photo = TelegramFile.ByFile(
                    File(PhotoTitleConverter.getAbsolutePhotoPath(teacher.photoTitle))
                ),
                caption = teacherService.getInfo(),
                replyMarkup = keyboardFactory.create(Keyboard.TeacherKeyboard()),
                parseMode = ParseMode.MARKDOWN
            )
        }

        callbackQuery(callbackData = "videoPreview") {

            val chatId = callbackQuery.message?.chat?.id ?: return@callbackQuery
            val messageId = callbackQuery.message?.messageId ?: return@callbackQuery

            val teacher = teacherService.getCurrentTeacher()

            bot.deleteMessage(
                chatId = ChatId.fromId(chatId),
                messageId = messageId
            )

            bot.sendMessage(
                chatId = ChatId.fromId(chatId),
                text = "–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º \uD83D\uDE09",
                parseMode = ParseMode.MARKDOWN,
            )

            bot.sendChatAction(
                chatId = ChatId.fromId(chatId),
                action = ChatAction.UPLOAD_VIDEO
            )

            bot.sendVideo(
                chatId = ChatId.fromId(chatId),
                video = TelegramFile.ByFile(
                    File(VideoTitleConverter.getAbsoluteVideoPath(teacher.videoTitle))
                ),
                width = 720,
                height = 1280,
                replyMarkup = keyboardFactory.create(Keyboard.BackToTeacher())
            )

            bot.deleteMessage(
                chatId = ChatId.fromId(chatId),
                messageId = messageId + 1
            )
        }

        callbackQuery(callbackData = "login") {

            val chatId = callbackQuery.message?.chat?.id ?: return@callbackQuery

            bot.sendMessage(
                chatId = ChatId.fromId(chatId),
                text = "–°–∫–æ—Ä–æ —Å–¥–µ–ª–∞–µ–º :)"
            )
        }

        callbackQuery(callbackData = "schedule") {

            val teacher = teacherService.getCurrentTeacher()

            val chatId = callbackQuery.message?.chat?.id ?: return@callbackQuery
            val messageId = callbackQuery.message?.messageId ?: return@callbackQuery

            bot.deleteMessage(
                chatId = ChatId.fromId(chatId),
                messageId = messageId
            )

            bot.sendPhoto(
                chatId = ChatId.fromId(chatId),
                photo = TelegramFile.ByFile(
                    File(PhotoTitleConverter.getAbsolutePhotoPath(teacher.photoTitle))
                ),
                caption = "–î–æ—Å—Ç—É–ø–Ω—ã *—Å–ª–µ–¥—É—é—â–∏–µ* –≥—Ä—É–ø–ø—ã:",
                replyMarkup = keyboardFactory.create(Keyboard.TeacherGroup()),
                parseMode = ParseMode.MARKDOWN
            )
        }

        callbackQuery(callbackData = "backToTeacher") {

            val chatId = callbackQuery.message?.chat?.id ?: return@callbackQuery
            val messageId = callbackQuery.message?.messageId ?: return@callbackQuery

            val teacher = teacherService.getCurrentTeacher()

            bot.deleteMessage(
                chatId = ChatId.fromId(chatId),
                messageId = messageId
            )

            bot.sendPhoto(
                chatId = ChatId.fromId(chatId),
                photo = TelegramFile.ByFile(
                    File(PhotoTitleConverter.getAbsolutePhotoPath(teacher.photoTitle))
                ),
                caption = teacherService.getInfo(),
                replyMarkup = keyboardFactory.create(Keyboard.TeacherKeyboard()),
                parseMode = ParseMode.MARKDOWN
            )
        }

        callbackQuery(callbackData = "6-9 –ª–µ—Ç") {

            val chatId = callbackQuery.message?.chat?.id ?: return@callbackQuery
            val messageId = callbackQuery.message?.messageId ?: return@callbackQuery

            val teacher = teacherService.getCurrentTeacher()
            val groupScheduleInfo = scheduleService.getDayAndTimeByTeacherId(teacher.id, "6-9 –ª–µ—Ç")

            bot.deleteMessage(
                chatId = ChatId.fromId(chatId),
                messageId = messageId
            )

            bot.sendPhoto(
                chatId = ChatId.fromId(chatId),
                photo = TelegramFile.ByFile(
                    File(PhotoTitleConverter.getAbsolutePhotoPath(teacher.photoTitle))
                ),
                caption = groupScheduleInfo.joinToString(separator = "\n"),
                replyMarkup = keyboardFactory.create(Keyboard.BackToSchedule()),
                parseMode = ParseMode.MARKDOWN
            )
        }

        callbackQuery(callbackData = "10-13 –ª–µ—Ç") {

            val chatId = callbackQuery.message?.chat?.id ?: return@callbackQuery
            val messageId = callbackQuery.message?.messageId ?: return@callbackQuery

            val teacher = teacherService.getCurrentTeacher()
            val groupScheduleInfo = scheduleService.getDayAndTimeByTeacherId(teacher.id, "10-13 –ª–µ—Ç")

            bot.deleteMessage(
                chatId = ChatId.fromId(chatId),
                messageId = messageId
            )

            bot.sendPhoto(
                chatId = ChatId.fromId(chatId),
                photo = TelegramFile.ByFile(
                    File(PhotoTitleConverter.getAbsolutePhotoPath(teacher.photoTitle))
                ),
                caption = groupScheduleInfo.joinToString(separator = "\n"),
                replyMarkup = keyboardFactory.create(Keyboard.BackToSchedule()),
                parseMode = ParseMode.MARKDOWN
            )
        }

        callbackQuery(callbackData = "Krump 8+") {

            val chatId = callbackQuery.message?.chat?.id ?: return@callbackQuery
            val messageId = callbackQuery.message?.messageId ?: return@callbackQuery

            val teacher = teacherService.getCurrentTeacher()
            val groupScheduleInfo = scheduleService.getDayAndTimeByTeacherId(teacher.id, "Krump 8+")

            bot.deleteMessage(
                chatId = ChatId.fromId(chatId),
                messageId = messageId
            )

            bot.sendPhoto(
                chatId = ChatId.fromId(chatId),
                photo = TelegramFile.ByFile(
                    File(PhotoTitleConverter.getAbsolutePhotoPath(teacher.photoTitle))
                ),
                caption = groupScheduleInfo.joinToString(separator = "\n"),
                replyMarkup = keyboardFactory.create(Keyboard.BackToSchedule()),
                parseMode = ParseMode.MARKDOWN
            )
        }

        callbackQuery(callbackData = "Lil'problems clan") {

            val chatId = callbackQuery.message?.chat?.id ?: return@callbackQuery
            val messageId = callbackQuery.message?.messageId ?: return@callbackQuery

            val teacher = teacherService.getCurrentTeacher()
            val groupScheduleInfo = scheduleService.getDayAndTimeByTeacherId(teacher.id, "Lil'problems clan")

            bot.deleteMessage(
                chatId = ChatId.fromId(chatId),
                messageId = messageId
            )

            bot.sendPhoto(
                chatId = ChatId.fromId(chatId),
                photo = TelegramFile.ByFile(
                    File(PhotoTitleConverter.getAbsolutePhotoPath(teacher.photoTitle))
                ),
                caption = groupScheduleInfo.joinToString(separator = "\n"),
                replyMarkup = keyboardFactory.create(Keyboard.BackToSchedule()),
                parseMode = ParseMode.MARKDOWN
            )
        }

        callbackQuery(callbackData = "One moment clan") {

            val chatId = callbackQuery.message?.chat?.id ?: return@callbackQuery
            val messageId = callbackQuery.message?.messageId ?: return@callbackQuery

            val teacher = teacherService.getCurrentTeacher()
            val groupScheduleInfo = scheduleService.getDayAndTimeByTeacherId(teacher.id, "One moment clan")

            bot.deleteMessage(
                chatId = ChatId.fromId(chatId),
                messageId = messageId
            )

            bot.sendPhoto(
                chatId = ChatId.fromId(chatId),
                photo = TelegramFile.ByFile(
                    File(PhotoTitleConverter.getAbsolutePhotoPath(teacher.photoTitle))
                ),
                caption = groupScheduleInfo.joinToString(separator = "\n"),
                replyMarkup = keyboardFactory.create(Keyboard.BackToSchedule()),
                parseMode = ParseMode.MARKDOWN
            )
        }

    }

}